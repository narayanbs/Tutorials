Load-time relocation and virtual memory support are two different concepts. Almost all CPUs and OSes these days have virtual memory support. The only really important point to understand about virtual memory is this: forget physical addresses. That is now a hardware and OS responsibility and, unless you are writing a paging system, you can forget about physical addresses. All addresses that a program uses are virtual addresses. This is a huge advantage and immensely simplifies the programming model. On 32-bit systems, this simply means that each process gets its own 4 GiB memory space, ranging from 0x00000000 to 0xffffffff.

An .exe represents a process. A linker produces .exe from .obj files. While both are binary files, .obj files are not executable because they do not contain the addresses of all the variables and functions. It is the job of the linker to provide these addresses, which it determines by placing these .obj files end-to-end and then computing the exact addresses of all the symbols (functions and variables). Thus, the .exe that is created has every address of functions and variables "hard-coded" into it. But there is still one critical information needed before the .exe can be created. The linker has to have insider knowledge about where in memory the .exe will be loaded. Will it be at address 0x00000000, or at 0xffff0000, or somewhere else? For example, in Windows all .exes are always loaded at an absolute starting address of 0x00400000. This is called the base address. When the linker generates the final addresses of symbols (functions and variables), it computes those from this address onward.

Now, .exes rarely need to be loaded at any other address. But the same is not true for .dlls. .dlls are the same as .exes (both are formatted in the portable executable (PE) file format, which describes the memory layout, for example, where text goes, where data goes, and how to find which one). .dlls have a preferred address, too. This simply means that the linker uses this value when it computes the addresses for symbols inside the .dll. If the .dll is loaded at this address, then we are all set.

But if the .dll cannot be loaded at this address (say it was 0x10000000) because some other .dll had already been loaded at this address, then the loader will find some other space in memory and load the .dll there. However, the global addresses of functions and symbols in the .dll are now incorrect. Thus, the loader has to do a relocation (also called "fixup"), in which it adjusts the addresses of all global symbols and functions to reflect their actual addresses.

In order to do this adjustment, the loader needs to be able to find all such symbols in the .dll. The PE file has a .reloc section that contains the internal offset of all such symbols.

Of course, there are other details, for example, regarding how indirection can be used when the compiler generated the code so that, instead of making direct calls, the calls are indirect and variables are accessed via known memory locations in the header of the .exe.

Finally, the gist is this: You need relocation (of some sort) to adjust addresses in the call and jump as well as variable access instructions when the code does not load at the position (within the 4 GiB address space) it was expected to load. When the OS loads a .exe, it has to pick a suitable place in this 4 GiB address space where it will copy the code and data chunks from this .exe on disk.


==================================================================================


There are two C/C++ library types:
1. static libraries (.a): archive of object(.o) files containing code that is linked and becomes part of the application
2. dynamic libraries (.so) also called shared object libraries: These are dynamically linked at runtime

Creating static libaries
------------------------
Let's create a simple static library 'libmath.a' that provides basic mathematical functions add and subtract. 
We will start by creating two source files add.c and subtract.c with the corresponding function definitions

// add.c
int add(int a, int b) {
    return a + b;
}

// subtract.c
int subtract(int a, int b) {
    return a - b;
}

Now compile each source files into object files
$ gcc -c add.c -o add.o
$ gcc -c subtract.c -o subtract.o


Use gnu ar utility to create the static library
$ ar rcs libmath.a add.o subtract.o

where 
	ar: Command to create archives.
	rcs: Options for ar:
	r: Insert the files into the archive (replace existing).
	c: Create the archive if it doesn't already exist.
	s: Write an index (symbol table) to the archive, allowing faster lookup of symbols.

Let's use the static library in a program

// main.c
#include <stdio.h>

// Declare the functions from libmath.a
extern int add(int a, int b);
extern int subtract(int a, int b);

int main() {
    int x = 10, y = 5;
    printf("Addition: %d\n", add(x, y));
    printf("Subtraction: %d\n", subtract(x, y));
    return 0;
}

Now compile main.c and link it against libmath.a

$ gcc main.c -o main -L. -lmath

where
	-L.: Specifies to search for libraries in the current directory (.).
	-lmath: Links against libmath.a.

You can execute the main program
$ ./main
Output
	Addition: 15
	Subtraction: 5


Note: In the above case, even though we use a static library libnath.a, during linking the C standard library (libc) is dynamically linked by default. 
You can check the dynamically loaded shared libraries using ldd command.
$ ldd ./main

If we want to make the entire program statically linked, including the C standard library. The we use the -static flag during the linking 
phase as shown below.

Static Executable
---------------------
Creating a static executable using GCC involves linking all necessary libraries statically into the executable file itself, 
instead of relying on dynamic linking to external libraries. This can be useful for creating self-contained executables 
that do not depend on external library files (.so files). Hereâ€™s a step-by-step guide along with an example:

Here is a sample application that uses the functions from the custom static library we created earlier 'libmath.a'

// main.c
#include <stdio.h>

// Declare functions from libmath.a
extern int add(int a, int b);
extern int subtract(int a, int b);

int main() {
    int x = 10, y = 5;
    printf("Addition: %d\n", add(x, y));
    printf("Subtraction: %d\n", subtract(x, y));
    return 0;
}

Now compile the source file into an object file
$ gcc -c main.c -o main.o

Link main.o with libmath.a and standard libraries('libc.a') 
$ gcc -static main.o -L. -lmath -o static_main

where
	-static: Instructs GCC to link libraries statically.
	-L.: Specifies to search for libmath.a in the current directory (.).
	-lmath: Links against libmath.a.

Running the static executable
$ ./static_main
Output
	Addition: 15
	Subtraction: 5

Note:
* When linking statically, GCC will include all necessary library code directly into the executable, resulting 
in a larger executable file size compared to dynamically linked executables.
* On Linux systems, even when creating a static executable, it typically still depends on libc (the C standard library), 
albeit in a statically linked form
* Even in a statically linked executable, libc functions are typically used for standard C operations such as memory allocation, 
I/O operations (printf, scanf), string manipulation (strcpy, strlen), and more.
* When you link statically, the necessary parts of libc are included in the executable itself. This means the code of libc 
functions gets copied into your executable, reducing the dependency on external shared objects (lib*.so files).


Create dynamic libraries
---------------------------
Let's use the same source files add.c and subtract.c as shown above
The compilation step includes an extra directive as shown below.

$ gcc -c -fPIC add.c -o add.o
$ gcc -c -fPIC subtract.c -o subtract.o

Where
	-fPIC: Generates position-independent code, necessary for shared libraries.

Now create the dynamic library 'libmath.so' from the compiled object files

$ gcc -shared -o libmath.so add.o subtract.o

where
	-shared: Instructs GCC to create a shared object (dynamic library).

Now let's use the above shared library in a program

// main.c
#include <stdio.h>
#include <dlfcn.h>

// Declare function pointers
typedef int (*add_func)(int, int);
typedef int (*subtract_func)(int, int);

int main() {
    // Load the dynamic library
    void *lib = dlopen("./libmath.so", RTLD_LAZY);
    if (!lib) {
        fprintf(stderr, "Error loading library: %s\n", dlerror());
        return 1;
    }

    // Retrieve function pointers
    add_func add = (add_func)dlsym(lib, "add");
    subtract_func subtract = (subtract_func)dlsym(lib, "subtract");
    if (!add || !subtract) {
        fprintf(stderr, "Error retrieving symbols: %s\n", dlerror());
        dlclose(lib);
        return 1;
    }

    // Use the functions
    int x = 10, y = 5;
    printf("Addition: %d\n", add(x, y));
    printf("Subtraction: %d\n", subtract(x, y));

    // Close the library
    dlclose(lib);

    return 0;
}


where
	dlopen: Opens the dynamic library (libmath.so in this case) at runtime.
	dlsym: Retrieves function pointers (add and subtract in this case) from the loaded library.
	dlclose: Closes the library after usage.

Compile and link the application
$ gcc main.c -o main -ldl

where
	-ldl: Links against the dl library which provides dynamic linking support (dlopen, dlsym, etc.).

Let's run the program

$ ./main
Output
Addition: 15
Subtraction: 5





