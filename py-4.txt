Python Context Manager 
-----------------------
Managing resources is essential in programming. Resources such as file descriptors and database connections have to be closed because
they are limited resources. Generally in languages we use try..except..finally to ensure the resources are closed even when an exception
is raised. 
Context managers provide an easier way of managing resources in python. They can be written using classes or functions (with decorators).
The with keyword is used, when it gets evaluated it should result in an object that performs context management.

When creating context managers using classes, we need to ensure that the class has the methods: __enter__() and __exit__(). 
The __enter__() allocates the resource that needs to be managed and the __exit__() performs the cleanup operations.

ex: 	
	# Python program creating a
	# context manager

	class ContextManager():
		def __init__(self):
			print('init method called')
			
		def __enter__(self):
			print('enter method called')
			return self
		
		def __exit__(self, exc_type, exc_value, exc_traceback):
			print('exit method called')

	with ContextManager() as manager:
		print('with statement block')

output:
	init method called
	enter method called
	with statement block
	exit method called

File Management using Context Manager

	# Python program showing
	# file management using
	# context manager

	class FileManager():
		def __init__(self, filename, mode):
			self.filename = filename
			self.mode = mode
			self.file = None
			
		def __enter__(self):
			self.file = open(self.filename, self.mode)
			return self.file
		
		def __exit__(self, exc_type, exc_value, exc_traceback):
			self.file.close()

	# loading a file
	with FileManager('test.txt', 'w') as f:
		f.write('Test')

	print(f.closed)
	
	#output
	True
	
Database connection management using context manager

	# Python program shows the
	# connection management
	# for MongoDB

	from pymongo import MongoClient

	class MongoDBConnectionManager():
		def __init__(self, hostname, port):
			self.hostname = hostname
			self.port = port
			self.connection = None

		def __enter__(self):
			self.connection = MongoClient(self.hostname, self.port)
			return self

		def __exit__(self, exc_type, exc_value, exc_traceback):
			self.connection.close()

	# connecting with a localhost
	with MongoDBConnectionManager('localhost', '27017') as mongo:
		collection = mongo.connection.SampleDb.test
		data = collection.find({'_id': 1})
		print(data.get('name'))
		
Pythonâ€™s generator functions and the contextlib.contextmanager decorator provide an alternative and convenient way to implement the 
context management protocol. If you decorate an appropriately coded generator function with @contextmanager, then you get a 
function-based context manager that automatically provides both required methods, .__enter__() and .__exit__().		

	from contextlib import contextmanager
	
	@contextmanager
	def open(name, mode):
		print("Creating file..")
		f = os.open(name, mode)
		yield f
		print("Closing file..")
		os.close(f)
....
	Creating file..
	Closing file..


	@contextmanager
	def hello_context_manager():
	    print("Entering the context...")
	    yield "Hello, World!"
	    print("Leaving the context...")


	with hello_context_manager() as hello:
	    print(hello)
	    
.....
	Entering the context...
	Hello, World!
	Leaving the context..
	    
In this example, you can identify two visible sections in hello_context_manager(). Before the yield statement, you have the setup section. 
There, you can place the code that acquires the managed resources. Everything before the yield runs when the flow of execution enters the context.

After the yield statement, you have the teardown section, in which you can release the resources and do the cleanup. The code after yield 
runs at the end of the with block. The yield statement itself provides the object that will be assigned to the with target variable.	    
	    


