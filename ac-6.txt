C language Keynotes
===========================
##### Pointers
Pointers store addresses. for exmp: int* p, here p stores the address of a variable of type int. 
char* c, here c stores the address of a variable of type char. 
An int takes 4 bytes, so p + 1 will be an address 4 bytes from p.
c takes 1 byte, so c + 1 will be an address 1 byte from c. 

In c language, a byte buffer is declared as unsigned char* buf;
buf represents the address of a variable that can have values b/w 0 and 255. Hence unsigned char *

##### Pointer and arrays

A pointer stores the address of a variable. An array is a contiguos sequence of elements. 
Arrays can be represented as pointers in C language. In fact the name of the array is a pointer to the 
first element of the array i.e the name represents the address of the first element in the array. 
for example, 
  int arr[] = {1,2,3},  Here arr is equal to &arr[0];
  arr[1] is nothing but *(arr + 1), similarly arr[2] is *(arr + 2)


Likewise for a multi-dimensional array 
  int arr[][3] = { {1,2,3}, {4,5,6}  }; // here arr is equal to &arr[0];
  arr[1][2] is nothing but *(*(arr + 1) + 2) or *(arr[1] + 2) 

Example:

int main(void) {
  int arr[] = {1, 2, 3};
  printf("%s\n", (arr == &arr[0]) ? "true" : "False");
  printf("%s\n", (arr[1] == *(arr + 1)) ? "true" : "False");

  int brr[][3] = {{1, 2, 3}, {4, 5, 6}};
  printf("%s\n", (brr == &brr[0]) ? "true" : "False");
  printf("%s\n", (brr[1][2] == *(*(brr + 1) + 2)) ? "true" : "False");
  return 0;
}

Arrays cannot be directly passed as parameters to a C function. The Arrays decay into pointer to 
the first element when it is passed as a parameter to the function.

int arr[] decays to a pointer to the first element i.e pointer to an int which is  int *arr; 

int arr[][3] decays into pointer to the first element, which in this case is an array of 3 elements.
so it decays to pointer to an array which is int (*)[3], (not int **arr)

// functions with different array passing syntax
void function1(int array[])
{
  printf("The second element is %d\n", array[1]);
}

void function2(int* array)
{
  printf("The second element is %d\n", array[1]);
}

void function3(int array[][3]) {
  printf("The second element is %d\n", (*array)[1]);
}

int main() {
    int arr[] = {1,2,3};
    function1(arr);
    function2(arr);

    int brr[][3] = { {1,2,3}, {4,5,6}};
    function3(brr);
  }


##### Note about intptr_t, uintptr_t, ptrdiff_t and size_t 

intptr_t and uintptr_t can can hold pointer values meaning they are large enough to hold all the addresses.

From the man pages:
       intptr_t is a signed integer type such that any valid (void *)
       value can be converted to this type and then converted back.  It
       is capable of storing values in the range [INTPTR_MIN,
       INTPTR_MAX].

       uintptr_t is an unsigned integer type such that any valid (void
       *) value can be converted to this type and then converted back.
       It is capable of storing values in the range [0, INTPTR_MAX].

       ptrdiff_t is used for a count of elements, or an array index.  It is the
       result of subtracting two pointers. It is a signed integer type
       capable of storing values in the range [PTRDIFF_MIN,
       PTRDIFF_MAX].

       size_t Used for a count of bytes.  It is the result of the
              sizeof() operator.  It is an unsigned integer type capable
              of storing values in the range [0, SIZE_MAX].
        
intptr_t and ptrdiff_t are synonyms. so INTPTR_MIN/MAX AND PTRDIFF_MIN/MAX are the same.
size_t and uintptr_t are synonyms. 

So which should we use? use ptrdiff_t for pointer arithmetic. when subtracting pointers offsets can be negative.
use ptrdiff_t for sizes and array index. use size_t only when interacting with external interfaces where unsignedness might matter. 
use uintptr_t for converting pointer addresses to integers (since addresses cant be negative) and during bit manipulation.

Converting a pointer to integer or integer to pointer: In C pointer-to-integer and integer-to-pointer conversions are implementation-defined. 
Rules to remember:
1. Do not convert an integer type to a pointer type if the resulting pointer is incorrectly aligned, does not point to an entity of the referenced type,
or is a trap representation.
2. Do not convert a pointer type to an integer type if the result cannot be represented in the integer type.

Non-Compliant ex: The size of a pointer may be greater than the size of an integer
void f(void) {
  char *ptr;
  /* ... */
  unsigned int number = (unsigned int)ptr;
  /* ... */
}

Compliant ex: Any valid pointer to void can be converted to intptr_t or uintptr_t and back with no change in value. 
void f(void) {
  char *ptr;
  /* ... */
  uintptr_t number = (uintptr_t)ptr; 
  /* ... */
}

Non-compliant ex:  a pointer is set directly to an integer constant, where it is unknown whether the result will be as intended:
unsigned int *g(void) {
  unsigned int *ptr = 0xdeadbeef;
  /* ... */
  return ptr;
}

Note: The integer value 0 can be converted to a pointer; it becomes the null pointer.

Compliant ex:
Any valid pointer to void can be converted to intptr_t or uintptr_t or their underlying types and back again with no change in value. 
Use of underlying types instead of intptr_t or uintptr_t is discouraged, however, because it limits portability.

#include <assert.h>
#include <stdint.h>
  
void h(void) {
  intptr_t i = (intptr_t)(void *)&i;
  uintptr_t j = (uintptr_t)(void *)&j;
  
  void *ip = (void *)i;
  void *jp = (void *)j;
  
  assert(ip == &i);
  assert(jp == &j);
}


##### Initialization and Assignment 
Arrays are not assignable. 
for ex: 
  int arr[] = { 1,2,3,4,5}; is initialization, but

  int arr[];
  arr = {1,2,3,4,5}; is not allowed. 

Another example

struct Person {
    char name[10];
    int age;
};

Person p = {.name="narayan", .age=40}; // ok
Person p;
p.name = "narayan"; // not ok 

Let's look at structs now

struct Person { char name[10]; int age };
struct Person p = {.name="Narayan", .age = 44}; // initialization
struct Person per;
per = { .name = "narayan", .age = 44 }; // not allowed

we can however do this.
per = (struct Person){ .name = "narayan", .age = 44 } // we are copying a new tmp struct

We cannot do that for arrays however, since arrays are not assignable.

##### Effective type of Object

Effective type of an object is the type given when the object is declared. 
ex:
int x;  effective type is int. 

Memory returned from `malloc` has no effective type. For example:

int *x = malloc(sizeof(int));

Assuming an `int` is 4 bytes in size, `x` now points to 4 bytes of memory with no 
effective type. This memory gets an effective type when assigned to:

*x = 123; 
Now those bytes have an effective type of `int`.

Alignment
----------------
In C programming, pointer alignment refers to the way pointers are positioned in memory 
relative to the boundaries of the data types they point to. Alignment is important for 
performance reasons and for adhering to the requirements of certain hardware 
architectures.

What Does "Aligned to the Correct Type" Mean?
When we say a pointer is "aligned to the correct type," we are referring to the fact that 
the pointer's address is properly aligned according to the type of data it points to. 
Different types of data may have different alignment requirements. For example:

char: Typically has the least strict alignment requirements and can be aligned at any 
byte boundary.
int: May require alignment to a 4-byte boundary (on many systems).
double: Might need to be aligned to an 8-byte boundary.
The alignment requirements are dictated by the hardware and can affect the performance of 
memory access operations. If a pointer is not correctly aligned for the type it points 
to, accessing data through that pointer can lead to inefficient access or even hardware 
exceptions on some systems.

Why Is Alignment Important?
Performance: Many CPUs are optimized to access memory efficiently when data is aligned on 
certain boundaries. Misaligned access can be slower or require additional instructions to 
handle.

Hardware Constraints: Some architectures require that data be aligned to specific 
boundaries. Accessing misaligned data can lead to hardware exceptions or crashes.
Portability: Proper alignment ensures that your code runs correctly across different 
hardware platforms, which may have different alignment requirements.

Example of obtaining alignment of types
----------------------------------------
#include <stdalign.h>
#include <stdio.h>

int main() {
  // Print the alignment requirements of various types
  printf("Alignment of char: %zu bytes\n", alignof(char));
  printf("Alignment of int: %zu bytes\n", alignof(int));
  printf("Alignment of double: %zu bytes\n", alignof(double));
  printf("Alignment of long: %zu bytes\n", alignof(long));
  printf("Alignment of long long: %zu bytes\n", alignof(long long));
  printf("Alignment of struct { char c; int i; }: %zu bytes\n", alignof(struct {
           char c;
           int i;
         }));

  // Define a struct with different types
  struct MyStruct {
    char c;
    int i;
    double d;
  };

  // Print the alignment requirement of the struct
  printf("Alignment of MyStruct { char c; int i; double d; }; : %zu bytes\n",
         alignof(struct MyStruct));

  return 0;
}

Output:

Alignment of char: 1 bytes
Alignment of int: 4 bytes
Alignment of double: 8 bytes
Alignment of long: 8 bytes
Alignment of long long: 8 bytes
Alignment of struct { char c; int i; }: 4 bytes
Alignment of MyStruct { char c; int i; double d; }; : 8 bytes

Examples of Allocation with specific alignment
---------------------------------------------
Using posix_memalign:

#include <stdlib.h>
#include <stdio.h>

int main() {
    void *ptr;
    size_t alignment = 16; // Must be a power of 2 and a multiple of `sizeof(void *)`
    size_t size = 1024;    // Size of memory to allocate


    if (posix_memalign(&ptr, alignment, size) != 0) {
        perror("posix_memalign failed");
        return 1;
    }

    // Use ptr as needed
    printf("Memory allocated at address: %p\n", ptr);

    free(ptr); // Free the allocated memory
    return 0;
}

Using aligned_alloc: (C11)

The alignment must be a power of two and a multiple of sizeof(void *).

#include <stdlib.h>
#include <stdio.h>

int main() {
    void *ptr;
    size_t alignment = 16; // Must be a power of 2 and a multiple of `sizeof(void *)`
    size_t size = 1024;    // Size of memory to allocate

    ptr = aligned_alloc(alignment, size);
    if (ptr == NULL) {
        perror("aligned_alloc failed");
        return 1;
    }

    // Use ptr as needed
    printf("Memory allocated at address: %p\n", ptr);

    free(ptr); // Free the allocated memory
    return 0;
}

malloc
-----------
According to the C standard, malloc guarantees that the memory it returns is suitably 
aligned for any kind of object, meaning it should be aligned according to the 
requirements of the most restrictive data type supported by the implementation. This 
typically means that the memory is aligned to the size of the largest data type (like 
double or long long) that the platform supports.

According to C11 standard, `The returned pointer is aligned at least to alignof(max_align_t), which is 
the strictest alignment requirement for any scalar type supported by the implementation.`

void *ptr = malloc(size);
* ptr is aligned to at least alignof(max_align_t)
* This means it is safe to store any object at ptr

Consider the following example:

#include <stdio.h>
#include <stdlib.h>

int main() {
    int *ptr = (int *)malloc(sizeof(int));
    if (ptr == NULL) {
        perror("Failed to allocate memory");
        return 1;
    }

    printf("Address of ptr: %p\n", (void *)ptr);
    printf("Address of *ptr: %p\n", (void *)ptr);

    // Check if address is correctly aligned for an integer
    if ((uintptr_t)ptr % alignof(int) == 0) {
        printf("Pointer is correctly aligned for int.\n");
    } else {
        printf("Pointer is not correctly aligned for int.\n");
    }

    free(ptr);
    return 0;
}

In this code:

malloc allocates memory for an int, which should naturally be aligned to the size 
required for an int.
We check the alignment by using modulo arithmetic with alignof(int), which tells us the 
alignment requirement for an int on the system.

Note:  
According to the C standard the cases where the pointer is known to be aligned 
to the target type include the following:
* The pointer could point to an object declared with a suitable alignment specifier. 
* It could point to an object returned by aligned_alloc(), calloc(), malloc(), or realloc(),


Difference between malloc, calloc and realloc
----------------------------------------------
Ex: 
MAXELEMS = 4

ptr = malloc(MAXELEMS * sizeof(int));

ptr1 = calloc(MAXELEMS, sizeof(int));

calloc() gives you a zero-initialized buffer, while malloc() leaves the memory uninitialized.

realloc reallocates the given area of memory.
Ex:
ptr = malloc(sizeof(int));
ptr1 = realloc(ptr, count * sizeof(int));

There are 3 cases:
1. If realloc cannot find enough space at all, it returns a null pointer, and leaves the previous region allocated.
2. It points to the same memory. 
3. It points to a different area of memory

if (ptr1 == NULL) // case 1 
{       
    printf("\nExiting!!");
    free(ptr);    // free the previous region
    exit(0);
} else { case 2 and 3
  ptr = ptr1;
}

--------------------------------------------------------

casting, strict aliasing, type punning rules of pointers in C
-----------------------------------------------------------------
If a pointer is known to be correctly aligned to the target type, then a cast to that type is permitted. 
For example, The following compliant solution uses the alignment specifier, which is new to C11, 
to declare the char object c with the same alignment as that of an object of type int. As a result, the two pointers 
reference equally aligned pointer types:

#include <stdalign.h>
#include <assert.h>
  
void func(void) {
  /* Align c to the alignment of an int */
  alignas(int) char c = 'x';
  int *ip = (int *)&c;
  char *cp = (char *)ip;
  /* Both cp and &c point to equally aligned objects */
  assert(cp == &c);
}

Before we talk more about casting and type punning let's look at another rule, 

Strict Aliasing
---------------
Strict aliasing rule in C standard enables the compiler to optimize code under the assumption that pointers to different 
types do not point to the same memory location. This means that no two pointers of incompatible types point to the same memory 
location. 

for ex:

```
	void f(float *x, int * y) {
		*x = 1;
		*y = 2;
		return *x;
	}
```

Here the compiler knows that x and y cannot alias at the same location. so it can 
optimize the code to return 1 directly without accessing the memory. 
But if the function had both `int *` arguments, x and y could point at the same memory 
location, the compiler has to fetch the code from x and return it. even though it could 
have just returned 1. 

The above rule can affect casting between pointer types. For example, 
casting a float * to an int * and accessing the same memory through both pointers is not 
strictly allowed by the standard. The compiler might generate incorrect code under the 
assumption that the two types do not alias

for ex: Say we call the above function like this

	int main() {
	    int x = 0;
	    std::cout << x << "\n";   // Expect 0
	    x = f(reinterpret_cast<float*>(&x), &x);
	    std::cout << x << "\n";   // Expect 0?
	}

``
Type Punning
--------------
Say we want to circumvent the type system and interpret an object as a different type. This is called type punning, 
to reinterpret a segment of memory as another type. Type punning is useful for tasks that want access to the underlying 
representation of an object to view, transport or manipulate. Typical areas we find type punning being used are compilers,
serialization, networking code, etc…
Traditionally this has been accomplished by taking the address of the object, casting it to a pointer of the type we want to 
reinterpret it as and then accessing the value, or in other words by aliasing. For example:

int x = 1;

// In C
float *fp = (float*)&x;  // Not a valid aliasing

// In C++
float *fp = reinterpret_cast<float*>(&x);  // Not a valid aliasing

printf( "%f\n", *fp );

As we have seen earlier this is not a valid aliasing, so we are invoking undefined behavior. But traditionally compilers did not 
take advantage of strict aliasing rules and this type of code usually just worked, developers have unfortunately gotten used to 
doing things this way. 

A common alternate method for type punning is through unions, which is valid in C but undefined behavior in C++

union u1
{
    int n;
    float f;
};

union u1 u;
u.f = 1.0f;

printf( "%d\n", u.n );  // UB in C++ n is not the active member

So, How do we Type Pun correctly?

The standard method for type punning in both C and C++ is memcpy. This may seem a little heavy handed but the optimizer should 
recognize the use of memcpy for type punning and optimize it away and generate a register to register move. 

Let's look at an example. 
A classic case of type punning is the Quake III fast inverse square root function, where the bits of an 
IEEE 754 floating-point number are interpreted as a 32-bit integer:

float y = number;
long  i = *(long *) &y;                 // evil floating point bit level hacking
i       = 0x5f3759df - (i >> 1);        // what the fuck? 
y       = *(float *) &i;


using memcpy, valid version of the inverse square root code could be:

float y = number;
uint32_t i;
static_assert(sizeof(i) == sizeof(y), "error: different sizes");
std::memcpy(&i, &y, sizeof(i));         // evil floating point bit level hacking
i = 0x5f3759df - (i >> 1);              // what the fuck? 
std::memcpy(&y, &i, sizeof(y));

In C++20 we may use bit_cast

float y = number;
auto  i = std::bit_cast<uint32_t>(y);   // evil floating point bit level hacking
i       = 0x5f3759df - (i >> 1);        // what the fuck? 
y       = std::bit_cast<float>(i);
std::cout << bit_cast<float>(0x447a0000) << "\n"; //assuming sizeof(float) == sizeof(unsigned int)


Before finishing, according to the C Standard the following casts are valid
-----------------------------------
It is safe to
* Convert a pointer from any type T* to any type U* if alignof(U) <= alignof(T)
* Cast from any object-pointer type to void *
* Cast from any object-pointer type to char *, signed char * or unsigned char *
* Cast among pointers to types differing only in signedness and / or type qualifiers. i.e (signed, unsigned, const, volatile etc)
* Cast from a pointer to a structure type to a pointer to the type of the structure's first member
* Cast from a pointer to a union type to a pointer to the type of any member of the union
* Cast from a pointer to an array type to a pointer to the array's element type, and vice versa
* Cast directly from a type T* to a type U* if one can safely convert from T* to U* via one or more safe intermediate conversions.
* Cast between any two function-pointer types

Note:
The safety of a pointer conversion is only about the conversion itself. It is not necessarily safe to dereference the pointer
resulting from a safe conversion, or, for function pointers, to call the pointed-to function via the converted pointer.

-------------------------------
setjmp and longjmp
--------------------
setjmp and longjmp are subroutines that let you perform complex flow control in C language.  
The state of a program depends completely on the contents of its memory (i.e. the code, globals, heap, and stack), and
the contents of its registers. The contents of the registers includes the stack pointer (sp), frame pointer (fp), and 
program counter (pc). What setjmp() does is save the contents of the registers so that longjmp() can restore them later. 
In this way, longjmp() ``returns'' to the state of the program when setjmp() was called.  

Specifically:

#include < setjmp.h >
int setjmp(jmp_buf env);

This says to save the current state of the registers into env.

If you look in /usr/include/setjmp.h, you'll see that jmp_buf is defined as:

#define _JBLEN  9
typedef struct { int _jb[_JBLEN + 1]; } jmp_buf[1];

This is an irritating way of saying that jmp_buf is an array of _JBLEN+1 integers.
So, when you call setjmp(), you pass it the address of an array of integers, and it stores the value of the registers 
in that array. Setjmp() returns 0 when you call it in this way. 

longjmp(jmp_buf env, int val);
Longjmp() resets the registers to the values saved in env. This includes the sp, fp and pc.
What this means is that longjmp() doesn't return. Instead, when you call it, you return as if you have just called
the setjmp() call that saved env. This is because the pc is restored along with the other registers. Setjmp() returns
the val argument of longjmp(), which is not allowed to be zero (read the man page). Thus, you know when setjmp() returns
a non-zero value that longjmp() was called, and is returning to setjmp(). 

Example:

#include <setjmp.h> 
#include <stdio.h> 
jmp_buf buf; 
void func() 
{ 
    printf("Hello Chunai \n"); 
  
    // Jump to the point setup by setjmp 
    longjmp(buf, 1); 
  
    printf("Greeting\n"); 
} 
  
int main() 
{ 
    // Setup jump position using buf and return 0 
    if (setjmp(buf)) 
        printf("Welcome\n"); 
    else { 
        printf("Wilkomen\n"); 
        func(); 
    } 
    return 0; 
}

Output:
Wilkomen
Hello Chunai
Welcome

------------------------------------------------------------------------------------------------------------
Shift / Rotate of bits
------------------------------------------
Left shift / right shift of bits -- Instructions like SHR, SHL or SAR
---------------------------------
If we shift bits to the left, the lower order bits are filled in the right with zeros
if we shift bits to the right, then 
 * for -ve numbers, the higher order bits are filled from left with 1's 
 * for +ve numbers, the higher order bits are filled from left with 0's
Since unsigned integers are always positive, right shifting fills zeros on the left. 

Left rotate / right rotate of bits - Instructions like ROL, ROR
------------------------------------
Left or right rotation insert bits that are shifted out into the opposite end. 
So bits that fall of the left are wrapped around to the right end. Similarly bits that fall of the right during 
a right rotate will be wrapped around to the left end. 


what happens if we shift bits beyond the size of the integer we are shifting. 
Say we have an uint32_t and we left shift or right shift it by 32 bits or beyond? It is undefined behavior in C language. So
different processor architectures behave differently. 

In x86 (32 -bit system), the shift amount is restricted to 5 bits i.e max 31 places. This means the x86 cpus
will shift by n & 31 places. Similarly in Power PC (64-bit system) the shift amount is restricted to 6-bits 
i.e they will shift by n & 63 places (i.e the low six bits of n).

so uint32_var << shift_amt is treated as uint32_var << (shift_amt & 0x1f) in x86
and uint32_var << shift_amt is treated as uint32_var << (shift_amt & 0x3f) in PowerPC 

Let's look at an example for x86, 

Suppose we have a uint32_t variable, with value 15
value = 0b00000000 00000000 00000000 00001111  (which is 15 in decimal)

Let's shift it by 3
shl eax, 3  ; Shift left logical (SHL) operation

shifting by 3, causes the shift amount to become (shift_amnt & 0x1f) i.e 3 & 0x1f which is 3. 

The result is 
value = 0b00000000 00000000 00000000 01111000  (which is 120 in decimal)

Now let's shift it by 32
shl eax, 32  ; Attempt to shift left by 32

so shifting by 32 causes the shift amount to  become (shift_amt & 0x1f) i.e 32 & 0x1f which is 0.

value = 0b00000000 00000000 00000000 01111000  (still 120 in decimal)

If we shift it by 37
shl eax, 37  ; Attempt to shift left by 37

the shift amount becomes 37 & 0x1f which is 5. 

Current value = 0b00000000 00000000 00000000 01111000  (still 120 in decimal)

Let's shift by 5, The result would be 
value = 0b00000000 00000000 00001111 00000000  (which is 3840 in decimal)


-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------
C datatypes and conversion revision
--------------------------------------

bool, char, short, int, long, long lonG
float, double, long double
enum, void
array, struct, union
pointer, function,

bool -> true or false (false = 0 and anything else is true)
char -> smallest addressable unit of memory that can contain basic character set (min size - 8 bits)

static keyword
----------------
static is used to declare variables and functions at global scope and additionally in c++ namespace scope and class scope.
static variables can also be declared in local scope. Static duration means that the object or variable is allocated when
the program starts and is deallocated when the program ends. The static keyword can be used in the following situations (c and c++)
1. when we declare a static variable/function at global scope (and or namespace scope), it specifies internal linkage. The variable
has static duration and is initialized to zero unless otherwise specified.
2. When we declare a static variable inside a function, it retains state in-between calls to that function.
3. When we declare a static data member inside a class, it is shared between all instances of the class. Note: It must be defined
at file scope before usage. 
4. when we declare a static function inside a class, it can't access an instance member because it doesn't have the implicit "this".
The function is also shared by all instances of the class.
5. Members of a union cannot be static. 

Type Hierarchy
--------------

bool <= char <= short <= int <= long <= long long <= float <= double <= long double

unsigned == signed 

conversion rules
-----------------
If we declare a literal without a suffix (U, UL, L,LL), by default it is treated as int. If the value exceeds
int the compiler may treat it as long or long long depending on its size and implementation.
If the literal exceeds the limit of long or long long, then its undefined behavior.

Likewise a floating point literal is a double by default.

char and short (signed/unsigned) are promoted to int in arithmetic expression. If int is unable to represent the value, then it 
is promoted to unsigned int. 
for ex: if size of short and int is the same say 16-bits, when unsigned short is promoted, it cannot be represented 
by int, so it is promoted to unsigned int. 

Likewise promotion occurs in an expression where operands have two different ranks in the type hierarchy.(int, long, long long)
Like the previous case, if signed type is unable to represent the value, unsigned type is used. 

unsigned integer overflow is defined. When it exceeds the maximum value, it wraps around to zero. 
for ex: adding 1 to UINT_MAX gives zero.

signed integer overflow is undefined behavior. It may wrap around from INT_MAX to INT_MIN or other compiler specific behavior.

So if we try to cram a long value into int, if its signed, then it's undefined behavior, but in the case of unsigned, it wraps around.
the result would be like 'value % (ULONG_MAX + 1)'.
If we try to put a negative value into unsigned, then the value is repeatedly added by UXXX_MAX + 1. 
for ex: -1 for unsigned int is -1 + UINT_MAX + 1 ==> UINT_MAX

Similarly for float and double, if we try to cram a value larger than a float into a float and it is not representable, 
it is undefined behavior. If the value is less than the max value, it is rounded to the nearest representable value. 

when we convert an integer to floating point, it is transformed into floating point representation. 5 becomes 5.0
Since floats have limited precision, very large integers might lose precision in floating point representation.
when a float is converted to integer, the decimal point and everything after it is removed 

float can be converted to double without loss of precision, double can be converted to floating point by approximating to 
nearest value. If value is too large for a float, then it is undefined behavior.



