Randomness
-------------
Randomness plays a pivotal role in various aspects of computer programming and data analysis. 
Whether we are developing games,conducting statistical simulations, securing cryptographic keys
or random content generation, randomness plays a key part.

Pseudo random numbers appear random but they are generated by a deterministic algorithm. 

Tne random module in python is designed to generate pseudo-random numbers. 
The secrets module in python is used for generating cryptographically strong random numbers 
suitable for managing data such as passwords, security tokens etc. 
In particular, secrets should be used in preference for security or cryptography and the default 
pseudo-random number generator in the random module, is designed for modelling and simulation.

Random Module
-----------------
Python's random module uses a pseudo-random number generator (PRNG) to generate random numbers. 
This PRNG is initialized with a seed value. If you set the same seed value every time you run your program, 
you'll get the same sequence of random numbers. This reproducability is crucial in situations where you need
to debug or test code that involves randomness. By fixing the seed, you can ensure that your program behaves 
deterministically with respect to random number generation.
Python uses the current system time as the default seed. This means that each time you run your program 
without setting a seed explicitly, you'll get a different sequence of random numbers.

Example:
import random

# Setting a fixed seed for reproducibility
random.seed(42)
print(random.random())  # Generate some random numbers

random.random() produces a random floats in the interval [0, 1]
random.randint(a,b) produces a random int in the range [a, b] including both end points
random.choice(l) produces a random element from the non empty sequence l 
random.sample(l, k) chooses k unique random elements from the population sequence l 
random.shuffle(l) randomly shuffle the sequence in place
random.randrange(start, stop, step=1) equivalent to random.choice(range(start, stop, step)) 

secrets module
---------------
The secrets module provides access to the most secure source of randomness that your operating system provides.

import secrets

secrets.randbelow(x) returns a random int in the range [0, x)  # Note: [0,x) means range of values from 0 to x-1
secrets.choice(seq) returns a random element from the non empty sequence seq
secrets.randbits(k) returns an integer with k random bits

# Tokens (In the all the following cases, if n is not provided a reasonable default is used)
secrets.token_bytes(n) generate random byte strings containing n random bytes.
secrets.token_hex(n) generate random text string in hexadecimal containing n random bytes.
secrets.token_urlsace(n) returns random URL-safe text string, containing n random bytes. Text is Base64 encoded.

# Others
secrets.compare_digest(a, b) Return True if strings or bytes-like objects a and b are equal, otherwise False, 


