Primer on how dns works and how resolution happens 
----------------------------------------------------
FORWARD DNS LOOKUP
*******************

When we use the browser to access a domain or when we use a command line program as shown below,

>>> socket.gethostbyname("www.example.com") 
or
>>> socket.gethostbyname_ex("www.example.com")

The following steps are carried out.

1. The programm invokes the DNS Client, and it or the (stub resolver) will query our recursive resolver for www.example.com
2. The recursive resolver (usually our internet provider), will send a query to the DNS root nameserver. 
3. The root nameserver will refer our recursive resolver to the .com tld (top level domain) name server.
4. The recursive resolver queries the .com TLD name server for www.example.com.
5. The server refers your recursive server to the authoritative servers for example.com.
6. Your recursive resolver queries the authoritative servers for www.example.com, and receives 1.2.3.4 as the answer.
7. Your recursive resolver caches the answer for the duration of the time-to-live (TTL) specified on the record, and returns it to you.

Let's try it with an example:

Let's resolve "research.swtch.com"

step1: Query a root nameserver. There are 13 root nameservers in the world. (try: dig +trace www.google.com), we'll select a random one

$ dig @h.root-servers.net research.swtch.com

h.root-servers.net is one of the 13 DNS root nameservers, and dig @h.root-servers.net means “send the query to h.root-servers.net”.

Response...... We are interested only in the authority section. These specify the tld nameservers for (com.) 

;; AUTHORITY SECTION:
com.			172800	IN	NS	a.gtld-servers.net.
com.			172800	IN	NS	b.gtld-servers.net.
com.			172800	IN	NS	c.gtld-servers.net.
com.			172800	IN	NS	d.gtld-servers.net.
com.			172800	IN	NS	e.gtld-servers.net.
com.			172800	IN	NS	f.gtld-servers.net.

step2: Query any tld nameserver, we've chosen the first one.

$ dig @a.gtld-servers.net. research.swtch.com

Response.... Again only interested in the authority section. These specify the authoritative nameservers. 

;; AUTHORITY SECTION:
swtch.com.		172800	IN	NS	a.dns.gandi.net.
swtch.com.		172800	IN	NS	b.dns.gandi.net.
swtch.com.		172800	IN	NS	c.dns.gandi.net.

step3: Query any authoritative nameserver. We choose the first one.

$ dig @a.dns.gandi.net. research.swtch.com

Response... We need to look at the answer section. 

;; ANSWER SECTION:
research.swtch.com.	28800	IN	CNAME	ghs.google.com.

So the resolution led to a cname record. According to the rule, if we get a cname record, then the dns client 
will restart the resolution with the specified cname domain.

So let's try that now

$ dig @h.root-servers.net ghs.google.com

Response...  (tld nameservers for com.)

;; AUTHORITY SECTION:
com.			172800	IN	NS	a.gtld-servers.net.
com.			172800	IN	NS	b.gtld-servers.net.
com.			172800	IN	NS	c.gtld-servers.net.
com.			172800	IN	NS	d.gtld-servers.net.
com.			172800	IN	NS	e.gtld-servers.net.


$ dig @a.gtld-servers.net ghs.google.com

Response... (authoritative nameservers)

;; AUTHORITY SECTION:
google.com.		172800	IN	NS	ns2.google.com.
google.com.		172800	IN	NS	ns1.google.com.
google.com.		172800	IN	NS	ns3.google.com.
google.com.		172800	IN	NS	ns4.google.com.

$ dig @ns2.google.com ghs.google.com

Response... Let's look at the answer section.

;; ANSWER SECTION:
ghs.google.com.		300	IN	A	142.250.193.179

There it is, we have finally got the IP of (research.swtch.com)


Reference:https://jvns.ca/blog/2022/01/11/how-to-find-a-domain-s-authoritative-nameserver/

*******************************************************
Point to remember:  How does Authoritative DNS server deal with CNAME type?

if there is a DNS zone as follows:

NAME                    TYPE   VALUE
--------------------------------------------------
bar.example.com.        CNAME  foo.example.com.
foo.example.com.        A      192.0.2.23

when an A record lookup for bar.example.com is carried out, the resolver will see a CNAME record and restart the checking 
at foo.example.com and will then return 192.0.2.23.
*******************************************************

Let's look at the python api.

>>> import socket
>>> socket.gethostbyname_ex("research.swtch.com")
('ghs.google.com', ['research.swtch.com'], ['142.250.77.179'])

It says that research.swtch.com is an alias for ghs.google.com. 
ghs.google.com is  mapped to the ip 142.250.77.179


We can also try the following command for a succint response. 

$ dig +noall +answer +multiline research.swtch.com

research.swtch.com.	7389 IN	CNAME ghs.google.com.
ghs.google.com.		300 IN A 142.250.77.179

	or

$ host research.swtch.com

research.swtch.com is an alias for ghs.google.com.
ghs.google.com has address 142.250.77.179
ghs.google.com has IPv6 address 2404:6800:4007:80f::2013k

***************************************************************************
Reverse DNS Lookup,  Pointer Record , FQDN (Fully Qualified domain name)
**************************************************************************
A reverse DNS lookup is the process of resolving an IP address to its associated domain name, which is the opposite 
of a typical forward DNS lookup (resolving a domain name to an IP address). The result of a reverse DNS lookup is often
represented by a PTR (Pointer) record, which points to a Fully Qualified Domain Name (FQDN).

Essentially, While forward DNS lookup uses A or AAAA records to map domain names to IP addresses, reverse DNS lookup uses PTR records 
to map IP addresses back to domain names.

A ptr record will typically look like  <IP-address-in-reverse>.in-addr.arpa.    IN    PTR   <hostname>.

for ex:

$ dig -x 8.8.8.8

8.8.8.8.in-addr.arpa.    IN    PTR   google-public-dns-a.google.com.	--> for ipv4

2001.4860.4860.0.0.0.0.0.0.8.8.8.8.ip6.arpa.   IN    PTR   google-public-dns-a.google.com.  	--> ipv6

Here google-public-dns-a.google.com is the Fully qualified domain name. 

Another example

$ dig -x 203.0.113.45

45.113.0.203.in-addr.arpa.   IN	   PTR   mail.example.com.

Kere, PTR record points to mail.example.com, which would indicate that the IP address 203.0.113.45 is associated with 
the mail server for the domain example.com.

The Fully Qualified Domain Name (FQDN) in the PTR record indicates the hostname or domain name associated with the given IP address. 
This typically represents the server or device associated with that IP address. For example, a PTR record might point to the domain 
name of a mail server, web server, or any other service that is associated with the IP address.
Reverse DNS lookups are commonly used for spam filtering, security checks, and logging purposes to ensure that IP addresses and 
domain names match in a trustworthy way.

Note: 
A reverse lookup (PTR record) does not always match the original domain name used in a forward lookup (A record)
But why is this different? 
We need to understand the concept of forward lookup zone and reverse lookup zone. These are separate zone files.
An IP address can be associated with multiple services or multiple hostnames, especially in shared hosting environments 
or when a server hosts several different services. In this case, the PTR record for the IP address might point to one of 
those hostnames, which may not be the same as the domain used in the forward lookup.
for ex:
Forward lookup: www.example.com -> 203.0.113.10
Reverse lookup: 203.0.113.10 -> mail.example.com
Here, the forward lookup points to www.example.com, but the reverse lookup points to mail.example.com, which could
indicate that the same IP address (203.0.113.10) is used by multiple services (like a web server and mail server).



How do we get the fully qualified domain name? 

You can check FQDN by running the following command on a server
$ hostname -f 
test.rtcamp.com

In python, socket.getfqdn returns a fully qualified domain name if it's available. If it is not available it calls socket.gethostname.

We can also use the following commands to do a reverse lookup

$ dig -x 142.250.77.179

Note: The output should have an Answer section with PTR record, i.e a reverse lookup zone file should exist. Otherwise
you will not be able to reverse lookup an ip address.

You can use the host command as well.

$ host 142.250.77.179

179.77.250.142.in-addr.arpa domain name pointer maa05s17-in-f19.1e100.net.

	or 

>>> socket.gethostbyaddr("142.258.77.179")
('maa05s17-in-f19.1e100.net', [], ['142.250.77.179'])


'maa05s17-in-f19.1e100.net' is the fully qualified domain name. 


A Forward-confirmed reverse DNS (FCrDNS), also known as full-circle reverse DNS, double-reverse DNS, or iprev, is a 
networking parameter configuration in which a given IP address has both forward (name-to-address) and reverse (address-to-name) 
Domain Name System (DNS) entries that match each other. Clearly in the above case it is not a FCrDNS.

Note: When we look at our system hostname using either "hostname" command in linux or socket.gethostname() in python, it basically does
a reverse lookup in our /etc/hosts file and returns the hostname. 

Let's look at another example

~ ⚡ dig www.skyscanner.net

; <<>> DiG 9.18.18-0ubuntu0.22.04.2-Ubuntu <<>> www.skyscanner.net
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 14069
;; flags: qr rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 65494
;; QUESTION SECTION:
;www.skyscanner.net.		IN	A

;; ANSWER SECTION:
www.skyscanner.net.	3264	IN	CNAME	www.skyscanner.net.cdn.skyscannerplatform.net.
www.skyscanner.net.cdn.skyscannerplatform.net. 60 IN A 18.161.216.37
www.skyscanner.net.cdn.skyscannerplatform.net. 60 IN A 18.161.216.62
www.skyscanner.net.cdn.skyscannerplatform.net. 60 IN A 18.161.216.32
www.skyscanner.net.cdn.skyscannerplatform.net. 60 IN A 18.161.216.8

;; Query time: 40 msec
;; SERVER: 127.0.0.53#53(127.0.0.53) (UDP)
;; WHEN: Tue Feb 27 21:13:40 IST 2024
;; MSG SIZE  rcvd: 167

We notice that the answer section indicates that resolving www.skyscanner.net returns a cname record and that domain 
is again resolved to get the ip addresses. We also notice that the same domain can be mapped to multiple ips

Now lets' do a reverse lookup at one of the IP addresses 18.161.216.37, using the host command

~ ⚡ host 18.161.216.37
;; communications error to 127.0.0.53#53: timed out
37.216.161.18.in-addr.arpa domain name pointer server-18-161-216-37.blr50.r.cloudfront.net.

It returns a fully qualified domain name (fqdn) and We notice that its different from the one specified in the forward lookup zone mapping.
it is not FCrDNS. 

Now let's use the python api to do the same

>>> import socket

>>> socket.gethostbyname_ex("www.skyscanner.net")
('www.skyscanner.net.cdn.skyscannerplatform.net', ['www.skyscanner.net'], ['18.161.216.32', '18.161.216.8', '18.161.216.62', '18.161.216.37'])

>>> socket.gethostbyaddr("18.161.216.37")
('server-18-161-216-37.blr50.r.cloudfront.net', [], ['18.161.216.37'])

>>> socket.getfqdn("www.skyscanner.net")
'server-18-161-216-32.blr50.r.cloudfront.net'

This is not FCrDNS as well. 
--------------------------------------------------------------------------------------------------------

Forward vs. Reverse DNS Lookup Zones: Do You Need Both?

Typically, when you need DNS services, your first and only thought is converting names to IP addresses via a forward lookup. 
The reverse lookup is usually an afterthought or something that is not well maintained. It is not required for forward lookups to work, 
but as mentioned above, some services may rely on it like mail services that query reverse lookup records to determine if the source is a spammer. 
In other cases, it can be helpful on things like traceroutes to see the name associated with the IP address.
