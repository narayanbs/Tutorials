golang networking guide
========================
There are two IP address types in the standard library: net.IP for just a basic IPv4 or IPv6 address, and 
then also net.IPAddr if you need to support IPv6 zone scopes.

type IP []byte

An IP is a single IP address, a slice of bytes. functions can either accept a 4 byte slice (ipv4) or a 16 byte slice (ipv6).

ipv6 := net.IP{0xfc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}		// IP i.e byte slice for ipv6
ipv4 := net.IP{10,123,0,12} // IP i.e byte slice for ipv4

fmt.Println(ipv6)	--> fc00::
fmt.Println(ipv4) 	--> 10.255.0.0

we can also create an ipv4 address using net.IPv4() function. ex: net.IPV4(10,255,0,0)

To create an IP from a string we use the ParseIP function -- func ParseIP(s string) IP 

ParseIP parses s as an IP address, returning the result. The string s can be in IPv4 dotted decimal ("192.0.2.1"), 
IPv6 ("2001:db8::68"), or IPv4-mapped IPv6 ("::ffff:192.0.2.1") form. If s is not a valid textual representation of an IP address, 
ParseIP returns nil.

fmt.Println(net.ParseIP("192.0.2.1"))
fmt.Println(net.ParseIP("2001:db8::68"))
fmt.Println(net.ParseIP("192.0.2"))
o/p
192.0.2.1
2001:db8::68
<nil>


type IPMask []byte -- The type that represents a Netmask. It identifies the network portion in an IP address. 

CIDR Notation -- 127.0.0.1/23 		--> says that the first 23 bits represent the network portion in the IP address. 

To create a netmask using the cidr notation --> func CIDRMask(ones, bits int) IPMask
for ex: net.CIDRMask(24, 32) --> ffffff00
IPV6 must use net.CIDRMask, for ex: net.CIDRMask(64,128)

IPV4 can also use the function func IPv4Mask(a, b, c, d byte) IPMask 	--> create a mask such as 255.255.255.0
Also, there is a method of IP that returns the default mask for IPv4: func (ip IP) DefaultMask() IPMask

A mask is then applied on the IP address using a method of IP to find the network portion for that IP address:
func (ip IP) Mask(mask IPMask) IP

ex:
	addr := net.ParseIP("127.0.0.1")	--> 127.0.0.1
	mask := net.CIDRMask(24, 32)		--> ffffff00
	network := addr.Mask(mask)		--> 127.0.0.0
	
	addr := net.ParseIP("2404:6800:4007:818::2004")
	mask := net.CIDRMask(64,128)
	network := addr.Mask(mask)
	
	// we can use DefaultMask for ipv4
	addr := net.ParseIP("192.168.1.3")
	mask := addr.DefaultMask()		--> ffffff00
	network := addr.Mask(mask)		--> 192.168.1.0
	ones,bits := mask.Size()		--> 24, 32


Golang DNS Lookup: CNAME, MX, NS, TXT & SRV
--------------------------------------------

Some hosts may have multiple IP addresses, usually from multiple network interface cards. A single DNS entry points to multiple IP addresses 
and visiting clients will get one assigned either randomly or in round-robin fashion. Heavyweight services such as Google or Facebook 
have much more sophisticated ways of doing this, often using a Content Distribution Network, but for smaller-scale providers it’s 
perfectly reasonable. 

The function LookupIP looks up the given host using the local resolver. It returns a slice of that host's IPv4 and IPv6 addresses.

func LookupIP(host string) ([]IP, error) returns a slice of IP 

addrs, err := net.LookupIP("www.google.com")
o/p
172.217.25.132
2404:6800:4006:807::2004

Similarly LookupHost looks up host using the local resolver. It returns a slice of host's addressses as strings.
func LookupHost(host string) (addrs []string, err error)

LookupIP is preferred over the Hosts method to resolve a name to IP.

PTR record: 
The function LookupAddr performs a reverse lookup for the given address, returning a list of names mapping to that address.
func LookupAddr(addr string) (names []string, err error)

addrs, err := net.LookupAddr("8.8.8.8") 
for _, name := range names {
		fmt.Printf("%s\n", name)
}

o/p: dns.google.

A host may also have multiple hostnames, acting as aliases. An alias will have an entry in a CNAME record. 
One of these addresses will be labeled as the “canonical” hostname.A canonical name is the final name after 
following zero or more CNAME records

The function LookupCNAME returns the canonical name for the given host.
func LookupCNAME(host string) (cname string, err error)

LookupCNAME does not return an error if host does not contain DNS "CNAME" records, as long as host resolves to address records.
The returned canonical name is validated to be a properly formatted presentation-format domain name.

cname, err := net.LookupCNAME("research.swtch.com")
fmt.Printf("%s\n", cname)

o/p: ghs.google.com

On linux you can use dig to check this, -->  dig +short research.swtch.com cname

name, err := net.LookupCNAME("www.google.com") 	--> www.google.com // Domain name is not a CNAME since both are the same
name, err := net.LookupCName("api.yellowduck.be") --> jono01.jono-fotografie.be" 


The function LookupMX returns the DNS MX records for the domain name, sorted by preference.
func LookupMX(name string) ([]*MX, error)

mxs, err := net.LookupMX("google.com")
for _, mx := range mxs {
		fmt.Printf("%s %v\n", mx.Host, mx.Pref)
}

o/p: smtp.google.com. 10

On linux you can use dig to check this, -->  dig +short google.com mx

The function LookupNS returns DNS NS records for the domain name.
func LookupNS(name string) ([]*NS, error)

nss, err := net.LookupNS("gmail.com")
for _, ns := range nss {
		fmt.Printf("%s\n", ns.Host)
}

o/p:
ns3.google.com. 
ns2.google.com. 
ns1.google.com. 
ns4.google.com.

On linux you can use dig to check this, -->  dig +short google.com ns


The function LookupSRV attempts to resolve an SRV query of the service, protocol (tcp or udp), and domain name, 
sorted by priority and randomized by weight within a priority. A Service record (SRV record) is a specification of data in DNS defining 
the location, i.e., the hostname and port number, of servers for specified service

func LookupSRV(service, proto, name string) (cname string, addrs []*SRV, err error)

cname, srvs, err := net.LookupSRV("xmpp-server", "tcp", "google.com")
fmt.Printf("\ncname: %s \n\n", cname)

for _, srv := range srvs {
	fmt.Printf("%v:%v:%d:%d\n", srv.Target, srv.Port, srv.Priority, srv.Weight)
}

o/p:
cname: _xmpp-server._tcp.google.com. 

xmpp-server.l.google.com.:5269:5:0
alt1.xmpp-server.l.google.com.:5269:20:0
alt3.xmpp-server.l.google.com.:5269:20:0
alt2.xmpp-server.l.google.com.:5269:20:0
alt4.xmpp-server.l.google.com.:5269:20:0


The function LookupTXT returns DNS TXT records for the domain name.
func LookupTXT(name string) ([]string, error)

txts, err := net.LookupTXT("gmail.com")
for _, txt := range txts {
	fmt.Printf("%s\n", txt)
}

v=spf1 redirect=_spf.google.com
globalsign-smime-dv=CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8=

on linux we can use dig to check this, dig +short gmail.com txt

------------------------------------------------------
IP, TCP , UDP
------------------------------------------------------

IPAddr type 
-----------
IPAddr represents the address of an IP end point. for IPV4 it is identical to an IP, but supports IPV6 zone scopes.
Many functions in net package return a pointer to IPAddr

type IPAddr struct {
	    IP IP
	    Zone string
}

It is a struct which contains an IP and zone (which may be needed for ipv6 addresses)
A primary use of this type is to perform DNS lookups on IP hostnames. The zone may be needed for
ambiguous IPv6 addresses with multiple network interfaces.

The ResolveIPAddr functiom parses addr as an IP address of the form "host" or "ipv6-host%zone" and resolves the domain name on 
the network net, which must be "ip", "ip4" or "ip6". The ResolveIPAddr function will perform a DNS lookup on a hostname and return a single IP address. How it does this depends on the operating system and its configuration. For example, a Linux/UNIX system may
use /etc/resolv.conf or /etc/hosts with the order of the search set in /etc/nsswitch.conf.

func ResolveIPAddr(net, addr string) (*IPAddr, error) --  Where net is one of ip, ip4, or ip6. 

addr, err := net.ResolveIPAddr("ip", "www.google.com")		--> 172.217.25.164

addr, err := net.ResolveIPAddr("ip6", "www.google.com")		--> 2404:6800:4006:801::2004


The TCPAddr type
------------------
The TCPAddr type is a structure containing an IP, a port, and a zone. The zone is required to distinguish
between possible ambiguous IPv6 link-local and site-local addresses, as different network interface cards
(NICs) may have the same IPv6 address.

type TCPAddr struct {
    IP   IP
    Port int
    Zone string
}

The function to create a TCPAddr is ResolveTCPAddr: func ResolveTCPAddr(net, addr string) (*TCPAddr, error)

Where net is one of tcp, tcp4, or tcp6 and the addr is a string composed of a hostname or IP address,
followed by the port number after a :, such as www.google.com:80 or 127.0.0.1:22. If the address is an
IPv6 address, which already has colons in it, then the host part must be enclosed in square brackets, such
as [::1]:23. Another special case is often used for servers, where the host address is zero, so that the TCP
address is really just the port name, as in :80 for an HTTP server.


The UDPAddr type
-------------------

type UDPAddr struct {
	IP   IP
	Port int
	Zone string // IPv6 scoped addressing zone
}

The function to create a UDPAddr is ResolveUDPAddr: func ResolveUDPAddr(net, addr string) (*UDPAddr, error)

Summary
-----------------
func ResolveIPAddr((network, address string) (*IPAddr, error)
func ResolveTCPAddr(network, address string) (*TCPAddr, error)
func ResolveUDPAddr(network, address string) (*UDPAddr, error)
func ResolveUnixAddr(network, address string) (*UnixAddr, error)

network --> "tcp", "tcp4" (IPv4-only), "tcp6" (IPv6-only), "udp", "udp4" (IPv4-only), "udp6" (IPv6-only), 
"ip", "ip4" (IPv4-only), "ip6" (IPv6-only), "unix", "unixgram" and "unixpacket".

address --> For TCP and UDP networks, the address has the form "host:port". The host must be a literal IP address, or a host name 
that can be resolved to IP addresses. The port must be a literal port number or a service name. If the host is a literal IPv6 address 
it must be enclosed in square brackets, as in "[2001:db8::1]:80" or "[fe80::1%zone]:80". The zone specifies the scope of the literal 
IPv6 address as defined in RFC 4007.

For TCP, UDP and IP networks, if the host is empty or a literal unspecified IP address, as in ":80", "0.0.0.0:80" or "[::]:80"  and 
 "", "0.0.0.0" or "::" for IP, the local system is assumed. (similar to INADDR_ANY or IN6ADDR_ANY_INIT)

ex: 
	 "golang.org:http", "192.0.2.1:http", "198.51.100.1:80", "[2001:db8::1]:domain", "[fe80::1%lo0]:53", ":80"

For Unix networks, the address must be a file system path.

Services
----------
Services run on host machines. They are typically long lived and are designed to wait for requests and
respond to them. There are many types of services, and there are many ways in which they can offer their
services to clients. The Internet world bases many of these services on two methods of communication—
TCP and UDP—although there are other communication protocols such as SCTP waiting in the wings to take
over. Many other types of service, such as peer-to-peer, remote procedure calls, communicating agents, and
many others, are built on top of TCP and UDP.

Ports
--------
Services live on host machines. We can locate a host using a IP address. But on each computer may be many
services, and a simple way is needed to distinguish between them. The method used by TCP, UDP, SCTP,
and others is to use a port number. This is an unsigned integer between 1 and 65,535 and each service will
associate itself with one or more of these port numbers.

There are many “standard” ports. Telnet typically uses port 23 with the TCP protocol. DNS uses port 53,
either with TCP or with UDP. FTP uses ports 21 and 20, one for commands, the other for data transfer. HTTP
usually uses port 80, but it often uses ports 8000, 8080, and 8088, all with TCP. The X Window System often
takes ports 6000-6007, both on TCP and UDP.
On a UNIX system, the commonly used ports are listed in the file /etc/services.

Go has a function to look up ports on all systems:

func LookupPort(network, service string) (port int, err error)

The network argument is a string such as "tcp" or "udp", while the service is a string such as "telnet"
or "domain" (for DNS)

port, err := net.LookupPort("tcp", "telnet")	--> 23


==== TCP ============

TCP Sockets
=======================
When you know how to reach a service via its network and port IDs, what then?

If you are a server, you need to be able to bind to a port and listen at it. When a message comes in, you
need to be able to read it and write back to the client.
If you are a client, you need an API that will allow you to connect to a service and then to send messages to that service and 
read replies back from the service.

server 
-------

1. bind to an address (ip port)
address := ":1200"
tcpAddr, err := net.ResolveTCPAddr("tcp", address)

2. listen to it
listener, err := net.ListenTCP("tcp", tcpAddr)

3. Accept a connection and communicate
conn, err := listener.Accept()

client
------
1. initialize the address
address := os.Args[1]
tcpAddr, err := net.ResolveTCPAddr("tcp4", address)

2. connect to the address 
conn, err := net.DialTCP("tcp", nil, tcpAddr)


functions
------------
func ListenTCP(network string, laddr *TCPAddr) (*TCPListener, error)	 
network ---> same as in server

	 
func DialTCP(network string, laddr, raddr *TCPAddr) (*TCPConn, error)
network --> same as in server
When using TCP, and the host resolves to multiple IP addresses, Dial will try each IP address in order until one succeeds.

laddr --> local address, if it is nil, a local address is automatically chosen
raddr --> remote address, if it is nil or an unspecified address then local system is assumed. 


A TCPConn is used by both a client and a server to read and write messages.

func (c *TCPConn) Write(b []byte) (n int, err error)
func (c *TCPConn) Read(b []byte) (n int, err error)  

TCPConn implements the io.Reader and io.Writer interfaces so that any method using a reader or writer can be applied to a TCPConn.


Example
-----------
Daytime server

package main
import (
        "fmt"
        "net"
        "os"
        "time"
)
func main() {
        address := ":1200"
        tcpAddr, err := net.ResolveTCPAddr("tcp", address)
        checkError(err)
        listener, err := net.ListenTCP("tcp", tcpAddr)
        checkError(err)
        for {
                conn, err := listener.Accept()
                if err != nil {
                        continue
                }
                daytime := time.Now().String()
                conn.Write([]byte(daytime)) // don't care about return value
                conn.Close()                // we're finished with this client
        }
}
func checkError(err error) {
        if err != nil {
                fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
                os.Exit(1)
        }
}


$telnet localhost 1200
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
2017-01-02 20:13:21.934698384 +1100 AEDTConnection closed by foreign host.


Get Header Info client
-----------------------

package main
import (
        "fmt"
        "io/ioutil"
        "net"
        "os"
)
func main() {
        if len(os.Args) != 2 {
                fmt.Fprintf(os.Stderr, "Usage: %s host:port ", os.Args[0])
                os.Exit(1)
        }
        service := os.Args[1]
        tcpAddr, err := net.ResolveTCPAddr("tcp4", service)
        checkError(err)
        conn, err := net.DialTCP("tcp", nil, tcpAddr)
        checkError(err)
        _, err = conn.Write([]byte("HEAD / HTTP/1.0\r\n\r\n"))
        checkError(err)
        result, err := io.ReadAll(conn)
        checkError(err)
        
        fmt.Println(string(result))
        os.Exit(0)
}
func checkError(err error) {
        if err != nil {
                fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
                os.Exit(1)
        }
}


$ GetHeadInfo www.google.com:80

HTTP/1.1 200 OK
Server: nginx/1.10.0 (Ubuntu)
Date: Tue, 28 Feb 2017 10:33:01 GMT
Content-Type: text/html
Content-Length: 2152
Last-Modified: Mon, 13 Oct 2008 02:38:03 GMT
Connection: close
ETag: "48f2b48b-868"
Accept-Ranges: bytes


Convert Single-Threaded to Multi-Threaded Server
---------------------------------------------------
// SimpleEchoServer
package main
import (
        "fmt"
        "net"
        "os"
)
func main() {
        service := ":1201"
        tcpAddr, err := net.ResolveTCPAddr("tcp4", service)
        checkError(err)
        listener, err := net.ListenTCP("tcp", tcpAddr)
        checkError(err)
        for {
                conn, err := listener.Accept()
                if err != nil {
                        continue
                }
                handleClient(conn)
                conn.Close() // we're finished
        }
}


func handleClient(conn net.Conn) {
        var buf [512]byte
        for {
                n, err := conn.Read(buf[0:])
                if err != nil {
                        return
                }
                fmt.Println(string(buf[0:n]))
                _, err2 := conn.Write(buf[0:n])
                if err2 != nil {
                        return
                }
        }
}
func checkError(err error) {
        if err != nil {
                fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
                os.Exit(1)
        }
}

While a client has a connection open to it, no other client can connect. Other clients are blocked and will probably time out.


// ThreadedEchoServer
package main
import (
        "fmt"
        "net"
        "os"
)
func main() {
        service := ":1201"
        tcpAddr, err := net.ResolveTCPAddr("tcp", service)
        checkError(err)
        listener, err := net.ListenTCP("tcp", tcpAddr)
        checkError(err)
        for {
                conn, err := listener.Accept()
                if err != nil {
                }
    // run as a goroutine
                go handleClient(conn)
        }
}
func handleClient(conn net.Conn) {
        // close connection on exit
        defer conn.Close()
        var buf [512]byte
        for {
                // read up to 512 bytes
                n, err := conn.Read(buf[0:])
                if err != nil {
                        return
                }
                fmt.Println(string(buf[0:]))
                // write the n bytes read
                _, err2 := conn.Write(buf[0:n])
                if err2 != nil {
                        return
                }
        }
}
func checkError(err error) {
        if err != nil {
                fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
                os.Exit(1)
        }
}


Controlling TCP Connections
----------------------------
a) Timeout
The server may want to time out a client if it does not respond quickly enough, i.e., does not write a request to
the server in time. This should be a long period (several minutes), because the users may be taking their time.
Conversely, the client may want to time out the server (after a much shorter time). 
Both do this as follows, This is done before any reads or writes on the socket.

func (c *IPConn) SetDeadline(t time.Time) error


b) Staying Alive
A client may want to stay connected to a server even if it has nothing to send. It can use this:
func (c *TCPConn) SetKeepAlive(keepalive bool) error
    
====== UDP =========    

    
UDP Sockets
===========

In a connectionless protocol, each message contains information about its origin and destination. There is
no “session” established using a long-lived socket. UDP clients and servers make use of datagrams, which
are individual messages containing source and destination information. There is no state maintained by
these messages, unless the client or server does so. The messages are not guaranteed to arrive, or may arrive
out of order.
The most common situation for a client is to send a message and hope that a reply arrives. The most
common situation for a server is to receive a message and then send one or more replies back to that client.
In a peer-to-peer situation, though, the server may just forward messages to other peers.
The major difference between TCP and UDP handling for Go is how to deal with packets arriving from
multiple clients, without the cushion of a TCP session to manage things. The major calls needed are as follows:
	
func ResolveUDPAddr(net, addr string) (*UDPAddr, error)

func ListenUDP(net string, laddr *UDPAddr) (c *UDPConn, err error)
func DialUDP(net string, laddr, raddr *UDPAddr) (c *UDPConn, err error)

func (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err error)
func (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (n int, err error)



/* UDPDaytimeServer
*/
package main
import (
        "fmt"
        "net"
        "os"
        "time"
)
func main() {
        service := ":1200"
        udpAddr, err := net.ResolveUDPAddr("udp", service)
        checkError(err)
        conn, err := net.ListenUDP("udp", udpAddr)
        checkError(err)
        for {
                handleClient(conn)
        }
}
func handleClient(conn *net.UDPConn) {
        var buf [512]byte
        _, addr, err := conn.ReadFromUDP(buf[0:])
        if err != nil {
                return
        }
        
        daytime := time.Now().String()
        conn.WriteToUDP([]byte(daytime), addr)
}
func checkError(err error) {
        if err != nil {
                fmt.Fprintf(os.Stderr, "Fatal error ", err.Error())
                os.Exit(1)
        }
}

$ go run UDPDaytimeServer.go

/* UDPDaytimeClient
*/
package main
import (
        "fmt"
        "net"
        "os"
)
func main() {
        if len(os.Args) != 2 {
                fmt.Fprintf(os.Stderr, "Usage: %s host:port", os.Args[0])
                os.Exit(1)
        }
        service := os.Args[1]
        udpAddr, err := net.ResolveUDPAddr("udp", service)
        checkError(err)
        conn, err := net.DialUDP("udp", nil, udpAddr)
        checkError(err)
        _, err = conn.Write([]byte("anything"))
        checkError(err)
        
        var buf [512]byte
        n, err := conn.Read(buf[0:])
        checkError(err)
        fmt.Println(string(buf[0:n]))
        os.Exit(0)
}
func checkError(err error) {
        if err != nil {
                fmt.Fprintf(os.Stderr, "Fatal error ", err.Error())
                os.Exit(1)
        }
}

$ go run UDPDaytimeClient.go localhost:1200

2017-03-01 21:37:03.988603994 +1100 AEDT

Server Listening on Multiple Sockets
A server may be attempting to listen to multiple clients not just on one port, but on many. In this case, it has
to use some sort of polling mechanism between the ports.
In C, the select() call lets the kernel do this work. The call takes a number of file descriptors. The
process is suspended. When I/O is ready on one of these, a wakeup is done, and the process can continue.
This is cheaper than busy polling. In Go, you can accomplish the same by using a different go routine for
each port. A thread will become runnable when the lower-level select() discovers that I/O is ready for this
thread.


The Conn, PacketConn, and Listener Types
==========================================
The Go net package recommends using these interface types rather than the concrete ones. But by
using them, you lose specific methods such as SetKeepAlive of TCPConn and SetReadBuffer of UDPConn,
unless you do a type cast. It is your choice.

So far we have differentiated between the API for TCP and the API for UDP, using for example DialTCP and
DialUDP returning a TCPConn and UDPConn, respectively. The Conn type is an interface and both TCPConn and
UDPConn implement this interface. To a large extent, you can deal with this interface rather than the two types.

Writing a server can be simplified using this function: 
	
	func Listen(net, laddr string) (l Listener, err error), 

Note that this function takes a string rather than address as the raddr argument, so that programs using this can avoid working out 
the address type first.

The net can be any of tcp, tcp4 (IPv4-only), tcp6 (IPv6-only), udp, udp4 (IPv4-only), udp6 (IPv6-only),
ip, ip4 (IPv4-only), and ip6 IPv6-only) and several UNIX-specific ones such as unix for UNIX sockets. It will
return an appropriate implementation of the Conn interface.	
	
This returns an object implementing the Listener interface. This interface has a method: 

	func (l Listener) Accept() (c Conn, err error) This will allow a server to be built.

For the client, Instead of separate dial functions for TCP and UDP, you can use a single function:

	func Dial(net, laddr, raddr string) (c Conn, err error)

Note that this function takes a string rather than address as the raddr argument, so that programs using this can avoid working out 
the address type first.

Like the server the net can be any of tcp, tcp4 (IPv4-only), tcp6 (IPv6-only), udp, udp4 (IPv4-only), udp6 (IPv6-only),
ip, ip4 (IPv4-only), and ip6 IPv6-only) and several UNIX-specific ones such as unix for UNIX sockets. It will
return an appropriate implementation of the Conn interface.	
	

/* ThreadedIPEchoServer
*/
package main
import (
        "fmt"
        "net"
        "os"
)

func main() {
        service := ":1200"
        listener, err := net.Listen("tcp", service)
        checkError(err)
        for {
                conn, err := listener.Accept()
                if err != nil {
                        continue
                }
                go handleClient(conn)
        }
}
func handleClient(conn net.Conn) {
        defer conn.Close()
        var buf [512]byte
        for {
                n, err := conn.Read(buf[0:])
                if err != nil {
                        return
                }
                _, err2 := conn.Write(buf[0:n])
                if err2 != nil {
                        return
                }
        }
}
func checkError(err error) {
        if err != nil {
                fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
                os.Exit(1)
        }
}



client: the earlier program to get HEAD information from a web page can be rewritten as IPGetHeadInfo.go:

/* IPGetHeadInfo
*/
package main
import (
        "bytes"
        "fmt"
        "io"
        "net"
        "os"
)
func main() {
        if len(os.Args) != 2 {
                fmt.Fprintf(os.Stderr, "Usage: %s host:port", os.Args[0])
                os.Exit(1)
        }
        service := os.Args[1]
        conn, err := net.Dial("tcp", service)
        checkError(err)
        _, err = conn.Write([]byte("HEAD / HTTP/1.0\r\n\r\n"))
        checkError(err)
        result, err := readFully(conn)
        checkError(err)
        fmt.Println(string(result))
        os.Exit(0)
}
func checkError(err error) {
        if err != nil {
                fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
                os.Exit(1)
        }
}
func readFully(conn net.Conn) ([]byte, error) {
        defer conn.Close()
        result := bytes.NewBuffer(nil)
        var buf [512]byte
        
        for {
                n, err := conn.Read(buf[0:])
                result.Write(buf[0:n])
                if err != nil {
                        if err == io.EOF {
                                break
                        }
                        return nil, err
                }
        }
        return result.Bytes(), nil
}

$ go run  IPGetHeadInfo.go  localhost:80

HTTP/1.1 200 OK
Server: nginx/1.10.0 (Ubuntu)
Date: Wed, 01 Mar 2017 10:42:39 GMT
Content-Type: text/html
Content-Length: 2152
Last-Modified: Mon, 13 Oct 2008 02:38:03 GMT
Connection: close
ETag: "48f2b48b-868"
Accept-Ranges: bytes


If you want to write a UDP server, there is an interface called PacketConn and a method to return an
implementation of this:
func ListenPacket(net, laddr string) (c PacketConn, err error)
This interface has the primary methods ReadFrom and WriteTo that handle packet reads and writes.

package main

import (
	"log"
	"net"
)

func main() {
	// listen to incoming udp packets
	pc, err := net.ListenPacket("udp", ":1053")
	if err != nil {
		log.Fatal(err)
	}
	defer pc.Close()

	for {
		buf := make([]byte, 1024)
		n, addr, err := pc.ReadFrom(buf)
		if err != nil {
			continue
		}
		go serve(pc, addr, buf[:n])
	}

}

func serve(pc net.PacketConn, addr net.Addr, buf []byte) {
	// 0 - 1: ID
	// 2: QR(1): Opcode(4)
	buf[2] |= 0x80 // Set QR bit

	pc.WriteTo(buf, addr)
}

udp client

func main() {

	//Connect udp
	conn, err := net.Dial("udp", "host:port")
	if err != nil {
		return err
	}
	defer conn.Close()

	//simple Read
	buffer := make([]byte, 1024)
	conn.Read(buffer)

	//simple write
	conn.Write([]byte("Hello from client"))

}


Raw Sockets and the IPConn Type
===============================
This section covers advanced material that most programmers are unlikely to need. it deals with raw sockets,
which allow programmers to build their own IP protocols, or use protocols other than TCP or UDP.

TCP and UDP are not the only protocols built above the IP layer. The site http://www.iana.org/
assignments/protocol-numbers lists about 140 of them (this list is often available on UNIX systems in the
file /etc/protocols). TCP and UDP are only numbers 6 and 17, respectively, on this list.
Go allows you to build so-called raw sockets, to enable you to communicate using one of these other
protocols, or even to build your own. But it gives minimal support: it will connect hosts and write and read
packets between the hosts. In the next chapter, we look at designing and implementing your own protocols
above TCP; this section considers the same type of problem, but at the IP layer.
To keep things simple, we use almost the simplest possible example: how to send an IPv4 ping message
to a host. Ping uses the echo command from the ICMP protocol. This is a byte-oriented protocol, in which
the client sends a stream of bytes to another host, and the host replies. The format of the ICMP packet
payload is as follows:
•The first byte is 8, standing for the echo message.
•The second byte is zero.
•The third and fourth bytes are a checksum on the entire message.
•The fifth and sixth bytes are an arbitrary identifier.
•The seventh and eight bytes are an arbitrary sequence number.
•The rest of the packet is user data.
The packet can be sent using the Conn.Write method, which prepares the packet with this payload. The
replies received include the IPv4 header, which takes 20 bytes. (See for example, the Wikipedia article on the
Internet Control Message Protocol, ICMP.)
The following program called Ping.go will prepare an IP connection, send a ping request to a host, and
get a reply. You may need root access in order to run it successfully:

/* Ping
*/
package main
import (
        "bytes"
        "fmt"
        "io"
        "net"
        "os"
)
// change this to my own IP address or set to 0.0.0.0
const myIPAddress = "192.168.1.2"
const ipv4HeaderSize = 20
func main() {
        if len(os.Args) != 2 {
                fmt.Println("Usage: ", os.Args[0], "host")
                os.Exit(1)
        }
        localAddr, err := net.ResolveIPAddr("ip4", myIPAddress)
	
	if err != nil {
                fmt.Println("Resolution error", err.Error())
                os.Exit(1)
        }
        remoteAddr, err := net.ResolveIPAddr("ip4", os.Args[1])
        if err != nil {
                fmt.Println("Resolution error", err.Error())
                os.Exit(1)
        }
        conn, err := net.DialIP("ip4:icmp", localAddr, remoteAddr)
        checkError(err)
        var msg [512]byte
        msg[0] = 8  // echo
        msg[1] = 0  // code 0
        msg[2] = 0  // checksum, fix later
        msg[3] = 0  // checksum, fix later
        msg[4] = 0  // identifier[0]
        msg[5] = 13 // identifier[1] (arbitrary)
        msg[6] = 0  // sequence[0]
        msg[7] = 37 // sequence[1] (arbitrary)
        len := 8
        // now fix checksum bytes
        check := checkSum(msg[0:len])
        msg[2] = byte(check >> 8)
        msg[3] = byte(check & 255)
        // send the message
        _, err = conn.Write(msg[0:len])
        checkError(err)
        fmt.Print("Message sent:    ")
        for n := 0; n < 8; n++ {
                fmt.Print(" ", msg[n])
        }
        fmt.Println()
        // receive a reply
        size, err2 := conn.Read(msg[0:])
        checkError(err2)
        fmt.Print("Message received:")
        for n := ipv4HeaderSize; n < size; n++ {
                fmt.Print(" ", msg[n])
        }
        fmt.Println()
        os.Exit(0)
}

func checkSum(msg []byte) uint16 {
        sum := 0
        // assume even for now
        for n := 0; n < len(msg); n += 2 {
                sum += int(msg[n])*256 + int(msg[n+1])
        }
        sum = (sum >> 16) + (sum & 0xffff)
        sum += (sum >> 16)
        var answer uint16 = uint16(^sum)
        return answer
}
func checkError(err error) {
        if err != nil {
                fmt.Fprintf(os.Stderr, "Fatal error: %s", err.Error())
                os.Exit(1)
        }
}
func readFully(conn net.Conn) ([]byte, error) {
        defer conn.Close()
        result := bytes.NewBuffer(nil)
        var buf [512]byte
        for {
                n, err := conn.Read(buf[0:])
                result.Write(buf[0:n])
                if err != nil {
                        if err == io.EOF {
                                break
                        }
                        return nil, err
                }
        }
        return result.Bytes(), nil
}

It is run using the destination address as an argument. The received message should differ from the sent
message in only the first type byte and the third and fourth checksum bytes, as follows:

Message sent:        8 0 247 205 0 13 0 37
Message received: 0 0 255 205 0 13 0 37
