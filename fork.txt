fork() -- In unix it starts new processes. 
Basically, how it works is this: the parent process (the one that already exists) fork()'s a child process (the new one). 
The child process gets a copy of the parent's data. Voila! You have two processes where there was only one!
ex:
    pid = fork()    

    if pid == 0 it indicates you are the child process. 
    if pid == -1 it indicates an error occured and no child was created.
    Any other value indicates you are the parent process.

First of all, you should know something of process behavior under Unix. When a process dies, it doesn't really go away completely. 
It's dead, so it's no longer running, but a small remnant is waiting around for the parent process to pick up. 
This remnant contains the return value from the child process and some other goop. So after a parent process fork()s a child process, 
it must wait() (or waitpid()) for that child process to exit. It is this act of wait()ing that allows all remnants of the child to vanish.

pid_t waitpid(pid_t pid, int *wstatus, int options);
pid_t wait(int *wstatus);

The waitpid() system call suspends execution of the calling process until a child specified by pid argument has terminated.
The wait() system call suspends execution of the calling process until one of its children terminates.
It's equivalent to waitpid(-1, &status, 0);

But these calls return immediately with the result if the child process has already terminated, before we could call wait or waitpid.

ex:

int main(void)
{
    pid_t pid;
    int rv;

    switch(pid = fork()) {
    case -1:
        perror("fork");  /* something went wrong */
        exit(1);         /* parent exits */

    case 0:
        printf(" CHILD: This is the child process!\n");
        printf(" CHILD: My PID is %d\n", getpid());
        printf(" CHILD: My parent's PID is %d\n", getppid());
        printf(" CHILD: Enter my exit status (make it small): ");
        scanf(" %d", &rv);
        printf(" CHILD: I'm outta here!\n");
        exit(rv);

    default:
        printf("PARENT: This is the parent process!\n");
        printf("PARENT: My PID is %d\n", getpid());
        printf("PARENT: My child's PID is %d\n", pid);
        printf("PARENT: I'm now waiting for my child to exit()...\n");
        wait(&rv);
        printf("PARENT: My child's exit status is: %d\n", WEXITSTATUS(rv));
        printf("PARENT: I'm outta here!\n");
    }

    return 0;
}



In Depth
----------

The parent process can wait for state changes of the child process and obtain information about it. 
The state change is considered to be: 
    a) the child terminated; 
    b) the child was stopped by a signal; 
    c) the child was resumed by a signal.   

This is done through the calls
pid_t wait(int *wstatus);
pid_t waitpid(pid_t pid, int *wstatus, int options);


If the state has already occured before waitXX() is called then they return immediately. Otherwise they block until either a 
child changes state or a signal handler interrupts the call (assuming that system calls are not automatically restarted using 
the SA_RESTART flag of sigaction

By default, waitpid() waits only for terminated children, but this behavior is modifiable via the options argument.
The value of pid can be:
< -1 --> meaning wait for any child process whose process group ID is equal to the absolute value of pid.

-1 --> meaning wait for any child process.

0 --> meaning wait for any child process whose process group ID is equal to that of the calling process.

> 0 --> meaning wait for the child whose process ID is equal to the value of pid.


In the case of a terminated child, performing a wait allows the system to release the resources associated with the child; if a
wait is not performed, then the terminated child remains in a "zombie" state.




