Python Networking
-----------------
module ipaddress - allows us to view and manipulate ip addresses as objects

Essential classes 
		* IPv4Address, IPv6Address
		* IPv4Network, IPv6Network
		* IPv4Interface, IPv6Interface

IP Address
---------
IP addresses are basically integers. 
An ipv4 address is a 32-bit integer represented in dot-decimal form. 
for ex: 220.14.9.37. 
An ipv6 address is 128-bits in length and consists of eight 16-bit fields seperated by colon.
Each field must contain a hexadecimal number, in contrast to the dotted-decimal notation of IPv4 address.
for ex: 2001:0db8:3c4d:0015:0000:0000:1a2f:1a2b

As mentioned above an ipv4 address represents a 32-bit integer in dot-decimal form.
for ex: 220.14.9.37

So what's the underlying integer? 
(
    220 * (256 ** 3) +
     14 * (256 ** 2) +
      9 * (256 ** 1) +
     37 * (256 ** 0)
)

It is 3,691,907,365. 

Inside ipaddress module, IPv4Address/IPv6Address are used to represent IP addresses. 
ex:
>>> addr = IPv4Address("202.160.8.12")
>>> addr = IPv6Address("2001:db8::1")

We can also use the factory function ip_address to retrieve an address. This will return the instance of the appropiate class.
>>> addr = ip_address("202.160.8.12")
>>> isinstance(addr, IPv4Address)
>>> True
>>> addr = ip_address("2001:db8::1")
>>> isinstance(addr, IPv6Address)
>>> True

Now let's get the integer value of the ip address

>>> addr = IPv4Address("220.14.9.37")
>>> int(addr)  
3691907365 
>>> addr.packed
b'\xdc\x0e\t%

The packed version is the bytes representation of the address that you encounter if you are working with TCP packet data, 

Instances of IPv4Address and IPv6Address are hashable. 
>>> hash(IPv4Address("220.14.9.37"))
4035855712965130587

so we can use them as keys in a dictionary

>>> num_connections = {
...     IPv4Address("220.14.9.37"): 2,
...     IPv4Address("100.201.0.4"): 16,
...     IPv4Address("8.240.12.2"): 4,
... }

On top of that, IPv4Address also implements methods that allow for comparisons using the underlying integer:
>>> IPv4Address("220.14.9.37") > IPv4Address("8.240.12.2")
True

>>> addrs = (
...     IPv4Address("220.14.9.37"),
...     IPv4Address("8.240.12.2"),
...     IPv4Address("100.201.0.4"),
... )
>>> for a in sorted(addrs):
...     print(a)
...
8.240.12.2
100.201.0.4
220.14.9.37


IP Network
----------
A network is a group of IP addresses. for ex: 192.4.2.0 -- 192.4.2.255, is a network with 256 addresses.
A CIDR notation is a more succint notation of a network. It defines a network as <network_address>/<prefix>
Note:CIDR (classless inter-domain routing)

So 192.4.2.0/24 indicates the network address 192.4.2.0 with prefixlen of 24. Prefix is the number of leading bits
that translate into a mask that identifies the network. In this case 24 bits indicate a mask of 255.255.255.0,
that indicates a network with 256 host addresses (192.4.2.0 to 192.4.2.255). 
Just as 192.4.2.0 is the network address, the final address at the end of the spectrum in a network is called
the broadcast address. This address can be used to communicate with all the hosts in the network.

>>> from ipaddress import IPv4Network

>>> net = IPv4Network("192.4.2.0/24")		
# or using the factory function 
>>> net = ip_network("192.4.2.0/24")

>>> net.network_address
IPv4Address('192.4.2.0')

>>> net.prefixlen
24

>>> net.num_addresses
256

>>> net.netmask
IPv4Address('255.255.255.0')

>>> net.broadcast_address
IPv4Address('192.4.2.255')

We can loop through all the Network addresses, as the network classes (IPv4Network & IPv6Network) support iteration. 

Let's assume a network address 192.4.2.0/28. Since the prefix length is 28, the netmask is 255.255.255.240 ie (11111111.11111111.11111111.11110000)
The number of hosts in the network is 16, starting from 192.4.2.0 to 192.4.2.15. 

>>> net = IPv4Network("192.4.2.0/28")
>>> for addr in net:
...     print(addr)
...
192.4.2.0
192.4.2.1
192.4.2.2
...
192.4.2.13
192.4.2.14
192.4.2.15

Similarly, net.hosts() returns a generator that will yield the addresses shown above, excluding the network and broadcast addresses:
>>> h = net.hosts()
>>> type(h)
<class 'generator'>
>>> next(h)
IPv4Address('192.4.2.1')
>>> next(h)
IPv4Address('192.4.2.2')

We can also check if an address is part of a network.

>>> net = IPv4Network("192.4.2.0/24")
>>> IPv4Address("192.4.2.12") in net
True
>>> IPv4Address("192.4.20.2") in net
False

There’s one more point worth mentioning about the netmask. You’ll most often see prefix lengths that are multiples of 8:

Prefix Length			Number of Addresses		Netmask
8				16,777,216			255.0.0.0
16				65,536				255.255.0.0
24				256				255.255.255.0
32				1				255.255.255.255

However, any integer between 0 and 32 is valid, though less common:
>>> net = IPv4Network("100.64.0.0/10")
>>> net.num_addresses
4194304
>>> net.netmask
IPv4Address('255.192.0.0')

Here the prefixlen is 10, it means that 10 bits is the mask that indicates the network address i.e 255.192.0.0
In binary this is 11111111.11000000.00000000.00000000
So the Network address can be (0-255).(0|64|128|192).0.0  ,Everything else is invalid. 
Note: Top two bits can have 4 values (0,64 128 or 192)

Note: 
We can also construct an IPv4Network directly from two addresses:
>>> IPv4Network("192.4.2.0/255.255.255.0")
IPv4Network('192.4.2.0/24')

Subnetting 
-----------
Subnetting a network means, to create logical divisions of the network. This divides a network into smaller subnets.
It is achieved by designating some high-order bits from the host part as part of the network prefix. The number of bits
being borrowed depends on the number of subnets we want to subdivide the network into. This is known as the subnet mask. 

Let's consider a network with a prefix length of 24, which indicates the mask for the network part of the address.
This network has 256 addresses.

>>> big_net = IPv4Network("200.100.10.0/24")

A common way to achieve subnetting is to take a network and increase its prefix length by 1, by borrowing a bit from the host address.
This creates two subnets, if the bit is 0 then that will be one subnet, if it is 1 then that will be the second subnet. Each subnet
will have 128 addresses.

IPv4Network provides a method .subnets() that returns an iterator over the subnets:

>>> for sn in big_net.subnets():
...     print(sn)
...
200.100.10.0/25
200.100.10.128/25

You can also tell .subnets() what the new prefix should be. A higher prefix means more and smaller subnets

>>> for sn in net.subnets(new_prefix=26):
...     print(sn)
...
200.100.10.0/26
200.100.10.64/26
200.100.10.128/26
200.100.10.192/26

Lets consider a subnet of big_net

>>> small_net = IPv4Network("200.100.10.0/25")

Now small_net is the subnet of big_net. Likewise big_net is called the supernet of small_net

>>> small_net.subnet_of(big_net)
True
>>> big_net.supernet_of(small_net)
True


Let's look at a detailed example, where we increase the prefix length by 2. 

The network 192.168.5.0/24 can be subdivided into the following /26 subnets. The (xx) highlighted two address bits of the host
become part of the network number in this process.

Network 			Network (binary)   xx		Broadcast address
192.168.5.0/26 		11000000.10101000.00000101.00000000 	192.168.5.63
192.168.5.64/26 	11000000.10101000.00000101.01000000 	192.168.5.127
192.168.5.128/26 	11000000.10101000.00000101.10000000 	192.168.5.191
192.168.5.192/26 	11000000.10101000.00000101.11000000 	192.168.5.255

The remaining bits after the subnet bits are used for addressing hosts within the subnet. In the above example, 
the subnet mask consists of 26 bits, making it 255.255.255.192, leaving 6 bits for the host identifier. 
This allows for 62 host combinations i.e  (64−2) without network address and broadcast address, since all zeros and all 1's are not recommended addresses. 

Subnet masks and IP Addresses Mask
-----------------------------------
     IP Addresses 	Hosts 	Netmask
/31 	2 		2 	255.255.255.254
/30 	4 		2 	255.255.255.252
/29 	8 		6 	255.255.255.248
/28 	16 		14 	255.255.255.240
/27 	32 		30 	255.255.255.224
/26 	64 		62 	255.255.255.192
/25 	128 		126 	255.255.255.128
/24 	256 		254 	255.255.255.0
/23 	512 		510 	255.255.254.0
/22 	1024 		1022 	255.255.252.0
/21 	2048 		2046 	255.255.248.0
/20 	4096 		4094 	255.255.240.0
/19 	8192 		8190 	255.255.224.0
/18 	16384 		16382 	255.255.192.0
/17 	32768 		32766 	255.255.128.0
/16 	65536 		65534 	255.255.0.0


Host Interfaces
------------
It a compact way to describe, both a host IP address and a network that it sits in. Note: This has nothing to do with Network interfaces (NIC).
That is discussed at the end of this tutorial.

>>> from ipaddress import IPv4Interface

>>> ifc = IPv4Interface("192.168.1.6/24")
# or using the factory function
>>> ifc = ip_interface("192.168.1.6/24")

>>> ifc.ip  # The host IP address
IPv4Address('192.168.1.6')

>>> ifc.network  # Network in which the host IP resides
IPv4Network('192.168.1.0/24')

Finally a note about special address ranges
-------------------------------------------
The Internet Assigned Numbers Authority (IANA), in tandem with the Internet Engineering Task Force (IETF), oversees the allocation of different 
address ranges. IANA’s IPv4 Special-Purpose Address Registry is a very important table dictating that certain address ranges should have special meanings.

A common example is that of a private address. A private IP address is used for internal communication between devices on a network 
that doesn’t require connectivity to the public Internet. The following ranges are for private use

Range			Number of Addresses			Network Address			Broadcast Address
10.0.0.0/8		16,777,216				10.0.0.0			10.255.255.255
172.16.0.0/12		1,048,576				172.16.0.0			172.31.255.255
192.168.0.0/16		65,536					192.168.0.0			192.168.255.255

>>> IPv4Address("10.243.156.214") in IPv4Network("10.0.0.0/8")
True

A second special address type is a link-local address, which is one reachable only from within a given subnet
>>> IPv4Address("169.254.169.123").is_link_local
True

Another special address is the loopback address, 127.0.0.1 
Packets sent to this address will not reach the network but will loop back to the host, i.e looped throuh the network interface card only.

>>> IPv4Address("127.0.0.1").is_loopback
True

Another interesting address range is the addresses for multicast. The addresses called multicast groups are a subset of 
the ipv4 address range 224.0.0.0 through 230.255.255.255.  These addresses are treated specially by network routers and switches,
so messages sent to the group can be distributed over the Internet to all recipients that have joined the group.
Multicast messages are always sent using UDP

>>> IPv4Address("224.3.29.71").is_multicast
True

Another interesting address is 0.0.0.0, it basically indicates no-valid address. So depending on the context, the no-valid
address will work in a different way. for instance, In the context of a route entry, it usually means the default route.
In the context of servers, 0.0.0.0 means "all IPv4 addresses on the local machine". If a host has two IP addresses, 
192.168.1.1 and 10.1.2.1, and a server running on the host listens on 0.0.0.0, it will be reachable at both of those IPs.


ipaddress module provides a set of properties for checking if the address is of a special type

>>> IPv4Address("10.243.156.214").is_private
True

>>> [i for i in dir(IPv4Address) if i.startswith("is_")]  # "is_X" properties
['is_global',
 'is_link_local',
 'is_loopback',
 'is_multicast',
 'is_private',
 'is_reserved',
 'is_unspecified']


Generally an IP address can either be static or dynamic. A static ip doesn't change with time. A dynamic ip will change
from time to time, as they are allocated by the DHCP server in the network.

Network Interface Overview
--------------------------
Now, let’s understand how any Linux system connects itself with the network. There’s special hardware called NIC (network interface card),
which does this magic of connecting any device to the network. Network interface controller, network adapter, or LAN adapter are the other
names for the NIC hardware.

A system can have one or more NICs for network connectivity. Each NIC will identify itself with a unique IP address within a network. 
In short, any system can have one or multiple IP addresses (due to many NICs attached). Even if the system has many NICs associated, 
there will be only one primary IP address at any point in time

A network interface is the software representation of the network interface card. The network interface is a medium to communicate
with the network hardware (NIC card) to configure it and to get information regarding the hardware like IP address, MAC address, 
link status, and packet transfer. Let’s check the network interface details of our system using the ip utility:

$ ip address show
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 00:0c:29:d5:cd:03 brd ff:ff:ff:ff:ff:ff
    altname enp2s1
    inet 192.168.207.128/24 brd 192.168.207.255 scope global dynamic noprefixroute ens33
       valid_lft 1773sec preferred_lft 1773sec
    inet6 fe80::37c:eba3:2365:23b7/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever

Our system has two network interfaces, ens33 and lo (loopback interface)

Primary Network Interface:
--------------------------
In a Linux system, there can be only one primary active connection to the network. As a result, only a single primary interface
will be present. The kernel routing table will help us identify the primary interface.

As we already know, the primary interface is the one with the default route, which means the primary interface should be able 
to reach the default gateway. That is to say, the kernel routing table’s gateway entry should be linked to the primary active 
interface of the system.
Now, let’s use the route utility to check the kernel routing table:

$ route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         _gateway        0.0.0.0         UG    100    0        0 ens33
link-local      0.0.0.0         255.255.0.0     U     1000   0        0 ens33
192.168.207.0   0.0.0.0         255.255.255.0   U     100    0        0 ens33

In the above snippet, we see that the ens33 interface is the one connected to the default gateway, 
hence, it’s the primary active interface of the system.

Checking the IP Address of the Primary Active Interface (Primary IP address)
-------------------------------------------------------------------------------
Subsequently, after identifying the primary active interface, the final step is checking the primary IP address — that is, the IP address 
of the primary active interface. There are many Linux utilities to find the primary IP address: ip, ifconfig, nmcli

ip
----
$ ip address show dev ens33 
2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 00:0c:29:d5:cd:03 brd ff:ff:ff:ff:ff:ff
    altname enp2s1
    inet 192.168.207.128/24 brd 192.168.207.255 scope global dynamic noprefixroute ens33
       valid_lft 1086sec preferred_lft 1086sec
    inet6 fe80::37c:eba3:2365:23b7/64 scope link noprefixroute 
       valid_lft forever preferred_lft forever

In the above code snippet, using the ip utility, we got all the details like IP address, MAC address, and traffic details 
regarding the primary active interface, ens33. Subsequently, to display only the primary IP address, we use the snipping tools
like grep and awk over the fetched primary interface details:

$ ip address show dev ens33 | grep -w inet | awk '{print $2}'
192.168.207.128/24

Here, the ip utility displays the netmask along with the IP address.

In addition to the above method, we can find the primary IP address using the ip utility. The ip utility is capable of finding 
the route to any destination. We can use this feature to find the primary IP address because it’s the interface that uses the default route.

Let’s find out the route to reach any random IP address (1.1.1.1) using the ip utility:
$ ip route get 1.1.1.1
1.1.1.1 via 192.168.207.2 dev ens33 src 192.168.207.128 uid 1000 
    cache 

The nmcli Utility
-----------------
The nmcli utility is for configuring and displaying network settings on systems that have network-manager installed.
It’s usually present in all modern-day Linux distributions. This utility will get details regarding all interfaces present in the system, 
so the user has to peruse and find the primary IP address of the primary active network interface:

$ nmcli 
ens33: connected to Wired connection 1
        "Intel 82545EM"
        ethernet (e1000), 00:0C:29:D5:CD:03, hw, mtu 1500
        ip4 default
        inet4 192.168.207.128/24
        route4 0.0.0.0/0
        route4 192.168.207.0/24
        route4 169.254.0.0/16
        inet6 fe80::37c:eba3:2365:23b7/64
        route6 fe80::/64

lo: unmanaged
        "lo"
        loopback (unknown), 00:00:00:00:00:00, sw, mtu 65536

DNS configuration:
        servers: 192.168.207.2
        domains: localdomain
        interface: ens33

Use "nmcli device show" to get complete information about known devices and
"nmcli connection show" to get an overview of active connection profiles.


External IP Address
-------------------
To check the external IP address of a system:
$ curl ifconfig.me
220.158.158.132
